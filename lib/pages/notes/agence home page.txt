import 'package:booking/pages/agence_form.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';

class DashPage extends StatefulWidget {
  DashPage({super.key});

  @override
  State<DashPage> createState() => _DashPageState();
}

class _DashPageState extends State<DashPage> {
  void _deleteAgency(String documentId) async {
    try {
      await FirebaseFirestore.instance
          .collection('agencies')
          .doc(documentId)
          .delete();
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Agency deleted successfully!')),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Failed to delete agency: $e')),
      );
    }
  }

  Future<void> _confirmDelete(String documentId) async {
    final shouldDelete = await showDialog<bool>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('Confirm Deletion'),
          content: const Text('Are you sure you want to delete this agency?'),
          actions: [
            TextButton(
              onPressed: () =>
                  Navigator.of(context).pop(false), // User selected No
              child: const Text('No'),
            ),
            TextButton(
              onPressed: () =>
                  Navigator.of(context).pop(true), // User selected Yes
              child: const Text('Yes'),
            ),
          ],
        );
      },
    );

    // If user confirmed deletion, proceed
    if (shouldDelete == true) {
      _deleteAgency(documentId);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  "Choose Your Agency",
                  style: GoogleFonts.notoSerif(
                    fontSize: 20,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                Container(
                  decoration: const BoxDecoration(
                    color: Colors.indigo,
                    borderRadius: BorderRadius.only(
                      topLeft: Radius.circular(20),
                      bottomLeft: Radius.circular(20),
                    ),
                  ),
                  child: IconButton(
                    onPressed: () => Navigator.pushReplacement(context,
                        MaterialPageRoute(builder: (context) {
                      return AgencyForm();
                    })),
                    icon: const Icon(
                      Icons.add,
                      color: Colors.white,
                    ),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16.0),
            Expanded(
              child: StreamBuilder<QuerySnapshot>(
                stream: FirebaseFirestore.instance
                    .collection('agencies')
                    .snapshots(),
                builder: (context, snapshot) {
                  if (snapshot.connectionState == ConnectionState.waiting) {
                    return const Center(child: CircularProgressIndicator());
                  }

                  if (snapshot.hasError) {
                    return const Center(child: Text('Something went wrong!'));
                  }

                  if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {
                    return const Center(child: Text('No agencies found.'));
                  }

                  final agencies = snapshot.data!.docs;

                  return ListView.builder(
                    itemCount: agencies.length,
                    itemBuilder: (context, index) {
                      final agency = agencies[index];
                      final data = agency.data() as Map<String, dynamic>;

                      return Container(
                        margin: const EdgeInsets.only(bottom: 16.0),
                        padding: const EdgeInsets.symmetric(
                            vertical: 8.0, horizontal: 12.0),
                        decoration: BoxDecoration(
                          color: Colors.indigo.shade50,
                          borderRadius: BorderRadius.circular(12.0),
                          boxShadow: [
                            BoxShadow(
                              color: Colors.grey.shade300,
                              blurRadius: 5.0,
                              offset: const Offset(0, 3),
                            ),
                          ],
                        ),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            // Centered Agency Name
                            Center(
                              child: Text(
                                data['agencyName'] ?? 'Unknown Agency',
                                style: const TextStyle(
                                  fontSize: 16.0,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                            ),
                            const SizedBox(height: 8.0),
                            // Row 1: Location and Owner
                            Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                _buildInfoItem(
                                  icon: Icons.location_on,
                                  label: 'HQ',
                                  value: data['hqLocation'] ?? 'Not Provided',
                                ),
                                _buildInfoItem(
                                  icon: Icons.person,
                                  label: 'Owner',
                                  value: data['owner'] ?? 'Not Provided',
                                ),
                              ],
                            ),
                            const SizedBox(height: 8.0),
                            // Row 2: Phone and Registered
                            Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                _buildInfoItem(
                                  icon: Icons.phone,
                                  label: 'Phone',
                                  value: data['ownerPhone'] ?? 'Not Provided',
                                ),
                                _buildInfoItem(
                                  icon: Icons.date_range,
                                  label: 'Registered',
                                  value: data['registrationDate'] ??
                                      'Not Provided',
                                ),
                              ],
                            ),
                            const SizedBox(height: 8.0),
                            // Row 3: Bio
                            Row(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                const Icon(Icons.description,
                                    color: Colors.indigo),
                                const SizedBox(width: 8.0),
                                Expanded(
                                  child: Text(
                                    data['agencyBio'] ?? 'No bio available.',
                                    style: const TextStyle(
                                      fontSize: 14.0,
                                    ),
                                  ),
                                ),
                              ],
                            ),
                            const SizedBox(height: 8.0),
                            // Delete Button with Confirmation
                            Align(
                              alignment: Alignment.centerRight,
                              child: IconButton(
                                onPressed: () => _confirmDelete(agency.id),
                                icon:
                                    const Icon(Icons.delete, color: Colors.red),
                                tooltip: 'Delete Agency',
                              ),
                            ),
                          ],
                        ),
                      );
                    },
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }

// Dislay data
  Widget _buildInfoItem({
    required IconData icon,
    required String label,
    required String value,
  }) {
    return Expanded(
      child: Row(
        children: [
          Icon(icon, color: Colors.indigo, size: 18.0),
          const SizedBox(width: 4.0),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  label,
                  style: const TextStyle(
                    fontSize: 10.0,
                    color: Colors.grey,
                  ),
                ),
                Text(
                  value,
                  style: const TextStyle(
                    fontSize: 12.0,
                    fontWeight: FontWeight.bold,
                  ),
                  overflow: TextOverflow.ellipsis,
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}
